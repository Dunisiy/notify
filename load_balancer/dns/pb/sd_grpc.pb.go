// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DNSLoadBalancerClient is the client API for DNSLoadBalancer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DNSLoadBalancerClient interface {
	GetAddress(ctx context.Context, in *DNSRequest, opts ...grpc.CallOption) (*DNSResponse, error)
}

type dNSLoadBalancerClient struct {
	cc grpc.ClientConnInterface
}

func NewDNSLoadBalancerClient(cc grpc.ClientConnInterface) DNSLoadBalancerClient {
	return &dNSLoadBalancerClient{cc}
}

func (c *dNSLoadBalancerClient) GetAddress(ctx context.Context, in *DNSRequest, opts ...grpc.CallOption) (*DNSResponse, error) {
	out := new(DNSResponse)
	err := c.cc.Invoke(ctx, "/DNSLoadBalancer/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSLoadBalancerServer is the server API for DNSLoadBalancer service.
// All implementations must embed UnimplementedDNSLoadBalancerServer
// for forward compatibility
type DNSLoadBalancerServer interface {
	GetAddress(context.Context, *DNSRequest) (*DNSResponse, error)
	mustEmbedUnimplementedDNSLoadBalancerServer()
}

// UnimplementedDNSLoadBalancerServer must be embedded to have forward compatible implementations.
type UnimplementedDNSLoadBalancerServer struct {
}

func (UnimplementedDNSLoadBalancerServer) GetAddress(context.Context, *DNSRequest) (*DNSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedDNSLoadBalancerServer) mustEmbedUnimplementedDNSLoadBalancerServer() {}

// UnsafeDNSLoadBalancerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DNSLoadBalancerServer will
// result in compilation errors.
type UnsafeDNSLoadBalancerServer interface {
	mustEmbedUnimplementedDNSLoadBalancerServer()
}

func RegisterDNSLoadBalancerServer(s *grpc.Server, srv DNSLoadBalancerServer) {
	s.RegisterService(&_DNSLoadBalancer_serviceDesc, srv)
}

func _DNSLoadBalancer_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSLoadBalancerServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DNSLoadBalancer/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSLoadBalancerServer).GetAddress(ctx, req.(*DNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DNSLoadBalancer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DNSLoadBalancer",
	HandlerType: (*DNSLoadBalancerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddress",
			Handler:    _DNSLoadBalancer_GetAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/sd.proto",
}
